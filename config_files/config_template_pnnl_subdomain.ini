[DATA]
# dataset class
class_name = PNNL_Subdomain
name = PNNL_Data

# graph construction parameters
boundary_node_types = [2]
source_node_types = [1,2,3,4,5,6,7] 
graph_type = knn 
k = 6 
radius = 0.01

# processing params
output_type = velocity
window_length = 1
apply_onehot = True
noise = [0.02, 0.03, 0.05]
noise_gamma = 0.1
normalize = True

[MODEL]
mgn_dim = 128
mp_iterations = 15
mlp_norm_type = LayerNorm
normalize_output = True

[TRAINING]
# hyperparams
epochs = 100
batch_size = 32
grad_accum_steps = 1
lr = 5e-3
scheduler = ExpLR
use_parallel = True

# can be one of [last_epoch, best_val]
load_prefix = last_epoch

# logging
expt_name = pnnl_subdomain_exp
log_rate = 100
use_tensorboard = True
tb_rate = 10
# expt_name = overfitddp_momentum${DATA:momentum}_bz${TRAINING:batch_size}_${DATA:noise}_noisegamma_${DATA:noise_gamma}_name_${DATA:name}_mgndim_${MODEL:mgn_dim}_mpiterations_${MODEL:mp_iterations}_${TRAINING:scheduler}_${TRAINING:lr}_${DATA:sim_range}_DP_${TRAINING:use_parallel}_DS_${DATA:class_name}_ddphook_${TRAINING:ddp_hook}
train_output_dir = /p/gscratchr/saini5/CCSI/output_dir/train
checkpoint_dir = ${TRAINING:train_output_dir}/checkpoints/${TRAINING:expt_name}
log_dir = ${TRAINING:train_output_dir}/logs/${TRAINING:expt_name}
tensorboard_dir = ${TRAINING:train_output_dir}/tensorboard/${TRAINING:expt_name}

# ddp
# 'mean' for default DDP behavior, or 'sum'
ddp_hook = sum
pin_memory = True

# world_size should be the total number of gpus across all nodes (1 process per gpu)
world_size = 1
data_num_workers = 0

[SCHEDULER]
# ExpLR
scheduler_decay_interval = 0.5
gamma = 0.01
min_lr = 1e-8
# uncomment below to manually set decay steps, otherwise it'll automatically compute it.
# decay_steps = 4e6

# OneCycle
max_lr = 3e-2

# ReduceLROPlateau
patience = 50

[TESTING]
do_rollout_test = True
rollout_start_idx = 100
test_output_dir = /p/gscratchr/saini5/CCSI/output_dir/test
outfile = ${TESTING:test_output_dir}/rollout.pk
batch_size = ${TRAINING:batch_size}

# --------------- EXTRA PARAMS (auto forwarded via **kwargs) ---------------
[PNNL_PARAMS]
root_dir = /usr/workspace/ccsi/PNNL_2020/t_equal_zero_and_pnnl_node_types/
partition_method = range
output_dim = 3
sim_range = [1,2]
time_range = [0,500]
same_xy = True
momentum = True

x_range = (-0.0505, -0.036071428571428574)
y_range = (0.1928571428571429, 0.21)
test_x_range = (-0.0505, -0.036071428571428574)
test_y_range = (0.1928571428571429, 0.21)
test_sim_range = [1,2]
test_time_range = [0,500]
